# Configuration for telegraf agent
[agent]
  interval = "12h"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = "0s"
  debug = false
  quiet = true
  ## Override default hostname, if empty use os.Hostname()
  hostname = "fmi"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

[[outputs.influxdb_v2]]
  urls = ["${INFLUXDB_URL}"]
  token = "${INFLUXDB_TOKEN}"
  organization = "${INFLUXDB_ORGANIZATION}"
  bucket = "fmi"
  namepass = ["fmi"]

# for debugging only
#[[outputs.file]]
#  files = [ "stdout" ]
#  flush_interval = "10s"
#  flush_jitter = "10s"
#  metric_batch_size = 20

[[inputs.http]]
  ## URL for the HTTP endpoint to query.
  urls = [
     "https://opendata.fmi.fi/wfs?service=WFS&version=2.0.0&request=getFeature&storedquery_id=fmi::observations::weather::simple&place=pori&timestep=60&parameters=temperature"
  ]
  ## HTTP request method
  method = "GET"

  ## HTTP response timeout (default: 5s)
  timeout = "10s"
  success_status_codes = [200]

  ## Optional name override.
  name_override = "fmi"

  tagexclude = ["url"]
  fieldinclude = ["value"]

  ## Data format to consume.
  data_format = "xml"
  
    ## Multiple parsing sections are allowed
  [[inputs.http.xml]]
    ## Optional: XPath-query to select a subset of nodes from the XML document.
    metric_selection = "/wfs:FeatureCollection/wfs:member/child::BsWfs:BsWfsElement"

    ## Optional: XPath-query to set the metric (measurement) name.
    #metric_name = "string('example')"

    ## Optional: Query to extract metric timestamp.
    ## If not specified the time of execution is used.
    timestamp = "BsWfs:Time"
    ## Optional: Format of the timestamp determined by the query above.
    ## This can be any of "unix", "unix_ms", "unix_us", "unix_ns" or a valid Golang
    ## time format. If not specified, a "unix" timestamp (in seconds) is expected.
    timestamp_format = "2006-01-02T15:04:05Z"

    ## Tag definitions using the given XPath queries.
    [inputs.http.xml.tags]
      location = "string('pori')"

    ## Non-integer field definitions using XPath queries.
    ## The field type is defined using XPath expressions such as number(), boolean() or string(). If no conversion is performed the field will be of type string.
    [inputs.http.xml.fields]
      name        = "string(BsWfs:ParameterName)"
      value       = "number(BsWfs:ParameterValue)"

  ## Set headers for the HTTP request.
  [inputs.http.headers]
    # Replace with your Base64 encoded Basic Auth credentials
    # Authorization = "Basic AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
